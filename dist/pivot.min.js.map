{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","first","sorter","sorters","last","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","sort","isFunction","input","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","flatColKey","flatRowKey","len2","n","fromCharCode","agg","pivotUtilities","pivotData","getClickHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","initialRender","len3","materializedInput","o","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","startsWith","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","q","s","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n\r\ncallWithJQuery ($) ->\r\n\r\n    ###\r\n    Utilities\r\n    ###\r\n\r\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\r\n        nStr += ''\r\n        x = nStr.split('.')\r\n        x1 = x[0]\r\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\r\n        rgx = /(\\d+)(\\d{3})/\r\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\r\n        return x1 + x2\r\n\r\n    numberFormat = (opts) ->\r\n        defaults =\r\n            digitsAfterDecimal: 2, scaler: 1,\r\n            thousandsSep: \",\", decimalSep: \".\"\r\n            prefix: \"\", suffix: \"\"\r\n            showZero: false\r\n        opts = $.extend({}, defaults, opts)\r\n        (x) ->\r\n            return \"\" if isNaN(x) or not isFinite(x)\r\n            return \"\" if x == 0 and not opts.showZero\r\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\r\n            return \"\"+opts.prefix+result+opts.suffix\r\n\r\n    #aggregator templates default to US number formatting but this is overrideable\r\n    usFmt = numberFormat()\r\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\r\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\r\n\r\n    aggregatorTemplates =\r\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\r\n            count: 0\r\n            push:  -> @count++\r\n            value: -> @count\r\n            format: formatter\r\n\r\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.length\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.join sep\r\n            format: (x) -> x\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\r\n            value: -> @sum\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                if not isNaN x then @val = Math.min(x, @val ? x)\r\n            value: -> @val\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                if not isNaN x then @val = Math.max(x, @val ? x)\r\n            value: -> @val\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        first: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            sorter: getSort(data?.sorters, attr)\r\n            push: (record) ->\r\n                x = record[attr]\r\n                @val = x if @sorter(x, @val ? x) <= 0\r\n            value: -> @val\r\n            format: (x) -> if isNaN(x) then x else formatter(x)\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        last: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            sorter: getSort(data?.sorters, attr)\r\n            push: (record) ->\r\n                x = record[attr]\r\n                @val = x if @sorter(x, @val ? x) >= 0\r\n            value: -> @val\r\n            format: (x) -> if isNaN(x) then x else formatter(x)\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            len: 0\r\n            push: (record) ->\r\n                if not isNaN parseFloat(record[attr])\r\n                    @sum += parseFloat(record[attr])\r\n                    @len++\r\n            value: -> @sum/@len\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: -> @sumNum/@sumDenom\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: ->\r\n                sign = if upper then 1 else -1\r\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\r\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\r\n                    (1 + 1.642374415149816/@sumDenom)\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\r\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    #default aggregators & renderers use US naming and number formatting\r\n    aggregators = do (tpl = aggregatorTemplates) ->\r\n        \"Count\":                tpl.count(usFmtInt)\r\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\r\n        \"List Unique Values\":   tpl.listUnique(\", \")\r\n        \"Sum\":                  tpl.sum(usFmt)\r\n        \"Integer Sum\":          tpl.sum(usFmtInt)\r\n        \"Average\":              tpl.average(usFmt)\r\n        \"Minimum\":              tpl.min(usFmt)\r\n        \"Maximum\":              tpl.max(usFmt)\r\n        \"First\":                tpl.first(usFmt)\r\n        \"Last\":                 tpl.last(usFmt)\r\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\r\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\r\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\r\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\r\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\r\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\r\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\r\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\r\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\r\n\r\n    renderers =\r\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\r\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\r\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\r\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\r\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\r\n\r\n    locales =\r\n        en:\r\n            aggregators: aggregators\r\n            renderers: renderers\r\n            localeStrings:\r\n                renderError: \"An error occurred rendering the PivotTable results.\"\r\n                computeError: \"An error occurred computing the PivotTable results.\"\r\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\r\n                selectAll: \"Select All\"\r\n                selectNone: \"Select None\"\r\n                tooMany: \"(too many to list)\"\r\n                filterResults: \"Filter values\"\r\n                apply: \"Apply\"\r\n                cancel: \"Cancel\"\r\n                totals: \"Totals\" #for table renderer\r\n                vs: \"vs\" #for gchart renderer\r\n                by: \"by\" #for gchart renderer\r\n\r\n    #dateFormat deriver l10n requires month and day names to be passed in directly\r\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\r\n\r\n    derivers =\r\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\r\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\r\n            utc = if utcOutput then \"UTC\" else \"\"\r\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\r\n                date = new Date(Date.parse(record[col]))\r\n                if isNaN(date) then return \"\"\r\n                formatString.replace /%(.)/g, (m, p) ->\r\n                    switch p\r\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\r\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\r\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\r\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\r\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\r\n                        when \"x\" then date[\"get#{utc}Day\"]()\r\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\r\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\r\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\r\n                        else \"%\" + p\r\n\r\n    rx = /(\\d+)|(\\D+)/g\r\n    rd = /\\d/\r\n    rz = /^0/\r\n    naturalSort = (as, bs) =>\r\n        #nulls first\r\n        return -1 if bs? and not as?\r\n        return  1 if as? and not bs?\r\n\r\n        #then raw NaNs\r\n        return -1 if typeof as == \"number\" and isNaN(as)\r\n        return  1 if typeof bs == \"number\" and isNaN(bs)\r\n\r\n        #numbers and numbery strings group together\r\n        nas = +as\r\n        nbs = +bs\r\n        return -1 if nas < nbs\r\n        return  1 if nas > nbs\r\n\r\n        #within that, true numbers before numbery strings\r\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\r\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\r\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\r\n\r\n        # 'Infinity' is a textual number, so less than 'A'\r\n        return -1 if isNaN(nbs) and not isNaN(nas)\r\n        return  1 if isNaN(nas) and not isNaN(nbs)\r\n\r\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\r\n        a = String(as)\r\n        b = String(bs)\r\n        return 0 if a == b\r\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\r\n\r\n        #special treatment for strings containing digits\r\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\r\n        b = b.match(rx)\r\n        while a.length and b.length\r\n            a1 = a.shift()\r\n            b1 = b.shift()\r\n            if a1 != b1\r\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\r\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\r\n                else\r\n                    return (if a1 > b1 then 1 else -1)\r\n        return a.length - b.length\r\n\r\n    sortAs = (order) ->\r\n        mapping = {}\r\n        l_mapping = {} # sort lowercased keys similarly\r\n        for i, x of order\r\n            mapping[x] = i\r\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\r\n        (a, b) ->\r\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\r\n            else if mapping[a]? then -1\r\n            else if mapping[b]? then 1\r\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\r\n            else if l_mapping[a]? then -1\r\n            else if l_mapping[b]? then 1\r\n            else naturalSort(a,b)\r\n\r\n    getSort = (sorters, attr) ->\r\n        if sorters?\r\n            if $.isFunction(sorters)\r\n                sort = sorters(attr)\r\n                return sort if $.isFunction(sort)\r\n            else if sorters[attr]?\r\n                return sorters[attr]\r\n        return naturalSort\r\n\r\n    ###\r\n    Data Model class\r\n    ###\r\n\r\n    class PivotData\r\n        constructor: (input, opts = {}) ->\r\n            @input = input\r\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\r\n            @aggregatorName = opts.aggregatorName ? \"Count\"\r\n            @colAttrs = opts.cols ? []\r\n            @rowAttrs = opts.rows ? []\r\n            @valAttrs = opts.vals ? []\r\n            @sorters = opts.sorters ? {}\r\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\r\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\r\n            @derivedAttributes = opts.derivedAttributes ? {}\r\n            @filter = opts.filter ? (-> true)\r\n            @tree = {}\r\n            @rowKeys = []\r\n            @colKeys = []\r\n            @rowTotals = {}\r\n            @colTotals = {}\r\n            @allTotal = @aggregator(this, [], [])\r\n            @sorted = false\r\n\r\n            # iterate through input, accumulating data for cells\r\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\r\n                @processRecord(record) if @filter(record)\r\n\r\n        #can handle arrays or jQuery selections of tables\r\n        @forEachRecord = (input, derivedAttributes, f) ->\r\n            if $.isEmptyObject derivedAttributes\r\n                addRecord = f\r\n            else\r\n                addRecord = (record) ->\r\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\r\n                    f(record)\r\n\r\n            #if it's a function, have it call us back\r\n            if $.isFunction(input)\r\n                input(addRecord)\r\n            else if $.isArray(input)\r\n                if $.isArray(input[0]) #array of arrays\r\n                    for own i, compactRecord of input when i > 0\r\n                        record = {}\r\n                        record[k] = compactRecord[j] for own j, k of input[0]\r\n                        addRecord(record)\r\n                else #array of objects\r\n                    addRecord(record) for record in input\r\n            else if input instanceof jQuery\r\n                tblCols = []\r\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\r\n                $(\"tbody > tr\", input).each (i) ->\r\n                    record = {}\r\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\r\n                    addRecord(record)\r\n            else\r\n                throw new Error(\"unknown input format\")\r\n\r\n        forEachMatchingRecord: (criteria, callback) ->\r\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\r\n                return if not @filter(record)\r\n                for k, v of criteria\r\n                    return if v != (record[k] ? \"null\")\r\n                callback(record)\r\n\r\n        arrSort: (attrs) =>\r\n            sortersArr = (getSort(@sorters, a) for a in attrs)\r\n            (a,b) ->\r\n                for own i, sorter of sortersArr\r\n                    comparison = sorter(a[i], b[i])\r\n                    return comparison if comparison != 0\r\n                return 0\r\n\r\n        sortKeys: () =>\r\n            if not @sorted\r\n                @sorted = true\r\n                v = (r,c) => @getAggregator(r,c).value()\r\n                switch @rowOrder\r\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\r\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\r\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\r\n                switch @colOrder\r\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\r\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\r\n                    else             @colKeys.sort @arrSort(@colAttrs)\r\n\r\n        getColKeys: () =>\r\n            @sortKeys()\r\n            return @colKeys\r\n\r\n        getRowKeys: () =>\r\n            @sortKeys()\r\n            return @rowKeys\r\n\r\n        processRecord: (record) -> #this code is called in a tight loop\r\n            colKey = []\r\n            rowKey = []\r\n            colKey.push record[x] ? \"null\" for x in @colAttrs\r\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n\r\n            @allTotal.push record\r\n\r\n            if rowKey.length != 0\r\n                if not @rowTotals[flatRowKey]\r\n                    @rowKeys.push rowKey\r\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\r\n                @rowTotals[flatRowKey].push record\r\n\r\n            if colKey.length != 0\r\n                if not @colTotals[flatColKey]\r\n                    @colKeys.push colKey\r\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\r\n                @colTotals[flatColKey].push record\r\n\r\n            if colKey.length != 0 and rowKey.length != 0\r\n                if not @tree[flatRowKey]\r\n                    @tree[flatRowKey] = {}\r\n                if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\r\n                @tree[flatRowKey][flatColKey].push record\r\n\r\n        getAggregator: (rowKey, colKey) =>\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n            if rowKey.length == 0 and colKey.length == 0\r\n                agg = @allTotal\r\n            else if rowKey.length == 0\r\n                agg = @colTotals[flatColKey]\r\n            else if colKey.length == 0\r\n                agg = @rowTotals[flatRowKey]\r\n            else\r\n                agg = @tree[flatRowKey][flatColKey]\r\n            return agg ? {value: (-> null), format: -> \"\"}\r\n\r\n    #expose these to the outside world\r\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\r\n        naturalSort, numberFormat, sortAs, PivotData}\r\n\r\n    ###\r\n    Default Renderer for hierarchical table layout\r\n    ###\r\n\r\n    pivotTableRenderer = (pivotData, opts) ->\r\n\r\n        defaults =\r\n            table: clickCallback: null\r\n            localeStrings: totals: \"Totals\"\r\n\r\n        opts = $.extend(true, {}, defaults, opts)\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        if opts.table.clickCallback\r\n            getClickHandler = (value, rowValues, colValues) ->\r\n                filters = {}\r\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\r\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\r\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        result.className = \"pvtTable\"\r\n\r\n        #helper function for setting row/col-span in pivotTableRenderer\r\n        spanSize = (arr, i, j) ->\r\n            if i != 0\r\n                noDraw = true\r\n                for x in [0..j]\r\n                    if arr[i-1][x] != arr[i][x]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            len = 0\r\n            while i+len < arr.length\r\n                stop = false\r\n                for x in [0..j]\r\n                    stop = true if arr[i][x] != arr[i+len][x]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        thead = document.createElement(\"thead\")\r\n        for own j, c of colAttrs\r\n            tr = document.createElement(\"tr\")\r\n            if parseInt(j) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            th.textContent = c\r\n            tr.appendChild th\r\n            for own i, colKey of colKeys\r\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtColLabel\"\r\n                    th.textContent = colKey[j]\r\n                    th.setAttribute(\"colspan\", x)\r\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n                    tr.appendChild th\r\n            if parseInt(j) == 0\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                tr.appendChild th\r\n            thead.appendChild tr\r\n\r\n        #then a row for row header headers\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for own i, r of rowAttrs\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.textContent = r\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            if colAttrs.length ==0\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n            tr.appendChild th\r\n            thead.appendChild tr\r\n        result.appendChild thead\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        tbody = document.createElement(\"tbody\")\r\n        for own i, rowKey of rowKeys\r\n            tr = document.createElement(\"tr\")\r\n            for own j, txt of rowKey\r\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtRowLabel\"\r\n                    th.textContent = txt\r\n                    th.setAttribute(\"rowspan\", x)\r\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\r\n                        th.setAttribute(\"colspan\",2)\r\n                    tr.appendChild th\r\n            for own j, colKey of colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{i} col#{j}\"\r\n                td.textContent = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, rowKey, colKey)\r\n                tr.appendChild td\r\n\r\n            totalAggregator = pivotData.getAggregator(rowKey, [])\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal rowTotal\"\r\n            td.textContent = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            if getClickHandler?\r\n                td.onclick = getClickHandler(val, rowKey, [])\r\n            td.setAttribute(\"data-for\", \"row\"+i)\r\n            tr.appendChild td\r\n            tbody.appendChild tr\r\n\r\n        #finally, the row for col totals, and a grand total\r\n        tr = document.createElement(\"tr\")\r\n        th = document.createElement(\"th\")\r\n        th.className = \"pvtTotalLabel\"\r\n        th.innerHTML = opts.localeStrings.totals\r\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n        tr.appendChild th\r\n        for own j, colKey of colKeys\r\n            totalAggregator = pivotData.getAggregator([], colKey)\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal colTotal\"\r\n            td.textContent = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            if getClickHandler?\r\n                td.onclick = getClickHandler(val, [], colKey)\r\n            td.setAttribute(\"data-for\", \"col\"+j)\r\n            tr.appendChild td\r\n        totalAggregator = pivotData.getAggregator([], [])\r\n        val = totalAggregator.value()\r\n        td = document.createElement(\"td\")\r\n        td.className = \"pvtGrandTotal\"\r\n        td.textContent = totalAggregator.format(val)\r\n        td.setAttribute(\"data-value\", val)\r\n        if getClickHandler?\r\n            td.onclick = getClickHandler(val, [], [])\r\n        tr.appendChild td\r\n        tbody.appendChild tr\r\n        result.appendChild tbody\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n\r\n    ###\r\n    Pivot Table core: create PivotData object and call Renderer on it\r\n    ###\r\n\r\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            cols : [], rows: [], vals: []\r\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\r\n            dataClass: PivotData\r\n            filter: -> true\r\n            aggregator: aggregatorTemplates.count()()\r\n            aggregatorName: \"Count\"\r\n            sorters: {}\r\n            derivedAttributes: {}\r\n            renderer: pivotTableRenderer\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {localeStrings}\r\n            localeStrings: localeStrings\r\n\r\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n\r\n        result = null\r\n        try\r\n            pivotData = new opts.dataClass(input, opts)\r\n            try\r\n                result = opts.renderer(pivotData, opts.rendererOptions)\r\n            catch e\r\n                console.error(e.stack) if console?\r\n                result = $(\"<span>\").html opts.localeStrings.renderError\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            result = $(\"<span>\").html opts.localeStrings.computeError\r\n\r\n        x = this[0]\r\n        x.removeChild(x.lastChild) while x.hasChildNodes()\r\n        return @append result\r\n\r\n\r\n    ###\r\n    Pivot Table UI: calls Pivot Table core above with options set by user\r\n    ###\r\n\r\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            derivedAttributes: {}\r\n            aggregators: locales[locale].aggregators\r\n            renderers: locales[locale].renderers\r\n            hiddenAttributes: []\r\n            menuLimit: 500\r\n            cols: [], rows: [], vals: []\r\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\r\n            dataClass: PivotData\r\n            exclusions: {}\r\n            inclusions: {}\r\n            unusedAttrsVertical: 85\r\n            autoSortUnusedAttrs: false\r\n            onRefresh: null\r\n            filter: -> true\r\n            sorters: {}\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {localeStrings}\r\n            localeStrings: localeStrings\r\n\r\n        existingOpts = @data \"pivotUIOptions\"\r\n        if not existingOpts? or overwrite\r\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n        else\r\n            opts = existingOpts\r\n\r\n        try\r\n            # do a first pass on the data to cache a materialized copy of any\r\n            # function-valued inputs and to compute dimension cardinalities\r\n            attrValues = {}\r\n            materializedInput = []\r\n            recordsProcessed = 0\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\r\n                return unless opts.filter(record)\r\n                materializedInput.push(record)\r\n                for own attr of record\r\n                    if not attrValues[attr]?\r\n                        attrValues[attr] = {}\r\n                        if recordsProcessed > 0\r\n                            attrValues[attr][\"null\"] = recordsProcessed\r\n                for attr of attrValues\r\n                    value = record[attr] ? \"null\"\r\n                    attrValues[attr][value] ?= 0\r\n                    attrValues[attr][value]++\r\n                recordsProcessed++\r\n\r\n            #start building the output\r\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\r\n\r\n            #renderer control\r\n            rendererControl = $(\"<td>\")\r\n\r\n            renderer = $(\"<md-select>\")\r\n                .addClass('pvtRenderer')\r\n                .appendTo(rendererControl)\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.renderers\r\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\r\n\r\n\r\n            #axis list, including the double-click menu\r\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\r\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\r\n\r\n            unusedAttrsVerticalAutoOverride = false\r\n            if opts.unusedAttrsVertical == \"auto\"\r\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\r\n            else\r\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\r\n\r\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\r\n                attrLength = 0\r\n                attrLength += a.length for a in shownAttributes\r\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\r\n\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                unused.addClass('pvtVertList')\r\n            else\r\n                unused.addClass('pvtHorizList')\r\n\r\n            for own i, attr of shownAttributes\r\n                do (attr) ->\r\n                    values = (v for v of attrValues[attr])\r\n                    hasExcludedItem = false\r\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\r\n\r\n                    valueList.append $(\"<h4>\").append(\r\n                        $(\"<span>\").text(attr),\r\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\r\n                        )\r\n                    if values.length > opts.menuLimit\r\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\r\n                    else\r\n                        if values.length > 5\r\n                            controls = $(\"<p>\").appendTo(valueList)\r\n                            sorter = getSort(opts.sorters, attr)\r\n                            placeholder = opts.localeStrings.filterResults\r\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\r\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\r\n                                .bind \"keyup\", ->\r\n                                    filter = $(this).val().toLowerCase().trim()\r\n                                    accept_gen = (prefix, accepted) -> (v) ->\r\n                                        real_filter = filter.substring(prefix.length).trim()\r\n                                        return true if real_filter.length == 0\r\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\r\n                                    accept =\r\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\r\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\r\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\r\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\r\n                                        else if filter.startsWith(\"~\")  then (v) ->\r\n                                                return true if filter.substring(1).trim().length == 0\r\n                                                v.toLowerCase().match(filter.substring(1))\r\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\r\n\r\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\r\n                                        if accept($(this).text())\r\n                                            $(this).parent().parent().show()\r\n                                        else\r\n                                            $(this).parent().parent().hide()\r\n                            controls.append $(\"<br>\")\r\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\r\n                                .html(opts.localeStrings.selectAll)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:not(:checked)\")\r\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\r\n                                    return false\r\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\r\n                                .html(opts.localeStrings.selectNone)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:checked\")\r\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\r\n                                    return false\r\n\r\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\r\n\r\n                        for value in values.sort(getSort(opts.sorters, attr))\r\n                             valueCount = attrValues[attr][value]\r\n                             filterItem = $(\"<label>\")\r\n                             filterItemExcluded = false\r\n                             if opts.inclusions[attr]\r\n                                filterItemExcluded = (value not in opts.inclusions[attr])\r\n                             else if opts.exclusions[attr]\r\n                                filterItemExcluded = (value in opts.exclusions[attr])\r\n                             hasExcludedItem ||= filterItemExcluded\r\n                             $(\"<input>\")\r\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\r\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\r\n                                .appendTo(filterItem)\r\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\r\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\r\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\r\n                             checkContainer.append $(\"<p>\").append(filterItem)\r\n\r\n                    closeFilterBox = ->\r\n                        if valueList.find(\"[type='checkbox']\").length >\r\n                               valueList.find(\"[type='checkbox']:checked\").length\r\n                                attrElem.addClass \"pvtFilteredAttribute\"\r\n                            else\r\n                                attrElem.removeClass \"pvtFilteredAttribute\"\r\n\r\n                            valueList.find('.pvtSearch').val('')\r\n                            valueList.find('.pvtCheckContainer p').show()\r\n                            valueList.hide()\r\n\r\n                    finalButtons = $(\"<p>\").appendTo(valueList)\r\n\r\n                    if values.length <= opts.menuLimit\r\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\r\n                            .appendTo(finalButtons).bind \"click\", ->\r\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\r\n                                    refresh()\r\n                                closeFilterBox()\r\n\r\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\r\n                        .appendTo(finalButtons).bind \"click\", ->\r\n                            valueList.find(\".changed:checked\")\r\n                                .removeClass(\"changed\").prop(\"checked\", false)\r\n                            valueList.find(\".changed:not(:checked)\")\r\n                                .removeClass(\"changed\").prop(\"checked\", true)\r\n                            closeFilterBox()\r\n\r\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\r\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\r\n                            {left, top} = $(e.currentTarget).position()\r\n                            valueList.css(left: left+10, top: top+10).show()\r\n\r\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\r\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\r\n\r\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\r\n                    unused.append(attrElem).append(valueList)\r\n\r\n            tr1 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #aggregator menu and value area\r\n\r\n            aggregator = $(\"<md-select>\").addClass('pvtAggregator')\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.aggregators\r\n                aggregator.append $(\"<option>\").val(x).html(x)\r\n\r\n            ordering =\r\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\r\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\r\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\r\n\r\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\r\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\r\n                .bind \"click\", ->\r\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\r\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\r\n                    refresh()\r\n\r\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\r\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\r\n                .bind \"click\", ->\r\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\r\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\r\n                    refresh()\r\n\r\n            $(\"<td>\").addClass('pvtVals')\r\n              .appendTo(tr1)\r\n              .append(aggregator)\r\n              .append(rowOrderArrow)\r\n              .append(colOrderArrow)\r\n              .append($(\"<br>\"))\r\n\r\n            #column axes\r\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\r\n\r\n            tr2 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #row axes\r\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\r\n\r\n            #the actual pivot table container\r\n            pivotTable = $(\"<td>\")\r\n                .attr(\"valign\", \"top\")\r\n                .addClass('pvtRendererArea')\r\n                .appendTo(tr2)\r\n\r\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\r\n                uiTable.find('tr:nth-child(2)').prepend unused\r\n            else\r\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\r\n\r\n            #render the UI in its default state\r\n            @html uiTable\r\n\r\n            #set up the UI initial state as requested by moving elements around\r\n\r\n            for x in opts.cols\r\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            for x in opts.rows\r\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            if opts.aggregatorName?\r\n                @find(\".pvtAggregator\").val opts.aggregatorName\r\n            if opts.rendererName?\r\n                @find(\".pvtRenderer\").val opts.rendererName\r\n\r\n            initialRender = true\r\n\r\n            #set up for refreshing\r\n            refreshDelayed = =>\r\n                subopts =\r\n                    derivedAttributes: opts.derivedAttributes\r\n                    localeStrings: opts.localeStrings\r\n                    rendererOptions: opts.rendererOptions\r\n                    sorters: opts.sorters\r\n                    cols: [], rows: []\r\n                    dataClass: opts.dataClass\r\n\r\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\r\n                vals = []\r\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\r\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\r\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                    if numInputsToProcess == 0\r\n                        $(this).remove()\r\n                    else\r\n                        numInputsToProcess--\r\n                        vals.push $(this).val() if $(this).val() != \"\"\r\n\r\n                if numInputsToProcess != 0\r\n                    pvtVals = @find(\".pvtVals\")\r\n                    for x in [0...numInputsToProcess]\r\n                        newDropdown = $(\"<select>\")\r\n                            .addClass('pvtAttrDropdown')\r\n                            .append($(\"<option>\"))\r\n                            .bind \"change\", -> refresh()\r\n                        for attr in shownAttributes\r\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\r\n                        pvtVals.append(newDropdown)\r\n\r\n                if initialRender\r\n                    vals = opts.vals\r\n                    i = 0\r\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                        $(this).val vals[i]\r\n                        i++\r\n                    initialRender = false\r\n\r\n                subopts.aggregatorName = aggregator.val()\r\n                subopts.vals = vals\r\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\r\n                subopts.renderer = opts.renderers[renderer.val()]\r\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\r\n                subopts.colOrder = colOrderArrow.data(\"order\")\r\n                #construct filter here\r\n                exclusions = {}\r\n                @find('input.pvtFilter').not(':checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        exclusions[filter[0]].push( filter[1] )\r\n                    else\r\n                        exclusions[filter[0]] = [ filter[1] ]\r\n                #include inclusions when exclusions present\r\n                inclusions = {}\r\n                @find('input.pvtFilter:checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        if inclusions[filter[0]]?\r\n                            inclusions[filter[0]].push( filter[1] )\r\n                        else\r\n                            inclusions[filter[0]] = [ filter[1] ]\r\n\r\n                subopts.filter = (record) ->\r\n                    return false if not opts.filter(record)\r\n                    for k,excludedItems of exclusions\r\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\r\n                    return true\r\n\r\n                pivotTable.pivot(materializedInput,subopts)\r\n                pivotUIOptions = $.extend {}, opts,\r\n                    cols: subopts.cols\r\n                    rows: subopts.rows\r\n                    colOrder: subopts.colOrder\r\n                    rowOrder: subopts.rowOrder\r\n                    vals: vals\r\n                    exclusions: exclusions\r\n                    inclusions: inclusions\r\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\r\n                    aggregatorName: aggregator.val()\r\n                    rendererName: renderer.val()\r\n\r\n                @data \"pivotUIOptions\", pivotUIOptions\r\n\r\n                # if requested make sure unused columns are in alphabetical order\r\n                if opts.autoSortUnusedAttrs\r\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\r\n                    $(unusedAttrsContainer).children(\"li\")\r\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\r\n                        .appendTo unusedAttrsContainer\r\n\r\n                pivotTable.css(\"opacity\", 1)\r\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\r\n\r\n            refresh = =>\r\n                pivotTable.css(\"opacity\", 0.5)\r\n                setTimeout refreshDelayed, 10\r\n\r\n            #the very first refresh will actually display the table\r\n            refresh()\r\n\r\n            @find(\".pvtAxisContainer\").sortable\r\n                    update: (e, ui) -> refresh() if not ui.sender?\r\n                    connectWith: @find(\".pvtAxisContainer\")\r\n                    items: 'li'\r\n                    placeholder: 'pvtPlaceholder'\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            @html opts.localeStrings.uiRenderError\r\n        return this\r\n\r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        # given a series of values\r\n        # must return a function to map a given value to a CSS color\r\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\r\n        colorScaleGenerator ?= (values) ->\r\n            min = Math.min(values...)\r\n            max = Math.max(values...)\r\n            return (x) ->\r\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\r\n                return \"rgb(255,#{nonRed},#{nonRed})\"\r\n\r\n        heatmapper = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorScale = colorScaleGenerator(values)\r\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\r\n\r\n        switch scope\r\n            when \"heatmap\"    then heatmapper \".pvtVal\"\r\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\r\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\"\r\n        heatmapper \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart =  ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            scaler = (x) -> 100*x/(1.4*max)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                    \"height\": \"55px\"\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": 0\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": \"gray\"\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      first: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) <= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      last: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) >= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, rowKey, []);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, [], colKey);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      if (getClickHandler != null) {\n        td.onclick = getClickHandler(val, [], []);\n      }\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, colOrderArrow, defaults, e, existingOpts, fn, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<md-select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<md-select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, q, ref4, ref5, s, subopts, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = q = 0, ref5 = numInputsToProcess; 0 <= ref5 ? q < ref5 : q > ref5; x = 0 <= ref5 ? ++q : --q) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (s = 0, len4 = shownAttributes.length; s < len4; s++) {\n                  attr = shownAttributes[s];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}